<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>Imageprocessing</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <antlr4.version>4.13.1</antlr4.version>
        <main.class>org.ImageProcessorGUI</main.class>
    </properties>

    <dependencies>
        <!-- ANTLR4 Runtime -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr4-runtime</artifactId>
            <version>${antlr4.version}</version>
        </dependency>

        <!-- JUnit for testing (optional) -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin: Compiles your Java source code -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.12.1</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <!-- ANTLR4 Maven Plugin: Generates Java code from your .g4 grammar -->
            <plugin>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-maven-plugin</artifactId>
                <version>${antlr4.version}</version>
                <configuration>
                    <!-- Correct: Point to the root directory where your .g4 grammar files are.
                         ANTLR will scan 'src/main/antlr4' and its subdirectories (like com/parsingfiles) for grammars. -->
                    <sourceDirectory>${project.basedir}/src/main/antlr4</sourceDirectory>
                    <!-- Correct: Specifies where ANTLR will output the generated Java source files.
                         This keeps generated code separate and prevents 'duplicate class' errors. -->
                    <outputDirectory>${project.build.directory}/generated-sources/antlr4</outputDirectory>
                    <listener>true</listener> <!-- Generate listener interface for parsing -->
                    <visitor>false</visitor> <!-- No visitor needed for this listener-based approach -->
                    <!-- The package name for generated classes (com.parsingfiles) is implicitly handled
                         by the '@header { package com.parsingfiles; }' in your Imagescript.g4.
                         Do NOT add <packageName> here, it's redundant and can cause warnings/confusion. -->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>antlr4</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Build Helper Maven Plugin: Adds the generated sources directory
                 to Maven's list of directories to compile. This is CRUCIAL for
                 the Java compiler to find the ANTLR-generated files. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.5.0</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase> <!-- Hook into the generate-sources phase -->
                        <goals>
                            <goal>add-source</goal> <!-- Add a source directory -->
                        </goals>
                        <configuration>
                            <sources>
                                <!-- The directory where ANTLR generated its Java source files -->
                                <source>${project.build.directory}/generated-sources/antlr4</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Maven Exec Plugin: For easily running your main class from Maven -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <!-- Specifies the fully qualified name of your main class to execute -->
                    <mainClass>${main.class}</mainClass>
                </configuration>
            </plugin>

            <!-- Maven Clean Plugin: For cleaning the project build directory -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.2.0</version>
            </plugin>

            <!-- Maven Resources Plugin: For managing project resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
            </plugin>

            <!-- Maven JAR Plugin: For creating an executable JAR file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>${main.class}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

        </plugins>
    </build>
</project>